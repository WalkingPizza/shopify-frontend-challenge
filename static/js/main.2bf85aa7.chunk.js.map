{"version":3,"sources":["types.tsx","MovieList.tsx","SearchBar/SearchBar.tsx","handlers.tsx","App.tsx","reportWebVitals.ts","SharedList/SharedList.tsx","index.tsx"],"names":["OMDBErrors","MovieListType","ButtonType","OMDBResponse","data","status","movies","error","this","Response","Error","Search","map","m","Movie","title","year","poster","imdbID","response","Title","Year","Poster","MovieList","renderIMDbButton","movie","Button","external","url","renderActionButton","buttonText","props","type","nominations","buttonType","destructive","primary","disabled","canEdit","readOnly","onClick","onEdit","renderMovie","ResourceItem","id","accessibilityLabel","name","children","Stack","vertical","TextStyle","variation","Caption","distribution","Card","sectioned","length","ResourceList","emptyState","placeholder","loading","isLoading","items","renderItem","React","Component","defaultProps","SearchBar","TextField","label","onChange","onSearchValueChange","value","searchValue","prefix","Icon","source","SearchMinor","color","getMovieByID","a","fetch","process","json","getMoviesBySearchTerm","searchTerm","App","readNominationsFromLocalStorage","localStorage","getItem","JSON","parse","updateLocalStorage","state","setItem","stringify","clear","handleAddNomination","nomination","Array","from","setState","handleRemoveNomination","filter","checkNominated","includes","handleSearchValueChange","errorMessage","shareModalOpen","toggleModal","ShareModal","lazy","shareButton","Page","primaryAction","Tooltip","content","fallback","Spinner","open","Layout","Section","Banner","onDismiss","oneHalf","search","noResults","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SharedList","getMovies","match","params","split","Promise","all","breadcrumbs","onAction","history","push","window","print","ReactDOM","render","basename","AppProvider","i18n","enTranslations","exact","path","component","document","querySelector"],"mappings":"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","file":"static/js/main.2bf85aa7.chunk.js","sourcesContent":["export class OMDBResponse {\r\n  constructor (data: any) {\r\n    this.status = data.Response === \"True\";\r\n    this.error = this.status ? null : data.Error;\r\n    this.movies = !this.status ? [] : data.Search ? data.Search.map((m: any) => new Movie(m)) : [new Movie(data)];\r\n  }\r\n\r\n  status: boolean;\r\n  movies: Movie[];\r\n  error?: string;\r\n}\r\n\r\nexport class Movie {\r\n  constructor (data: any) {\r\n    this.title = data.Title;\r\n    this.year = data.Year;\r\n    this.poster = data.Poster;\r\n    this.imdbID = data.imdbID;\r\n    this.response = data.Response === \"True\" ? true : false;\r\n  }\r\n\r\n  title: string;\r\n  year: string;\r\n  poster: string;\r\n  imdbID: string;\r\n  response: boolean; \r\n}\r\n\r\nexport enum OMDBErrors {\r\n  tooManyResults = \"Too many results.\",\r\n  noResults = \"Movie not found!\"\r\n}\r\n\r\nexport enum MovieListType {\r\n  search,\r\n  nominations\r\n}\r\n\r\nexport enum ButtonType {\r\n  primary,\r\n  secondary,\r\n  destructive\r\n}","import React from 'react';\r\nimport '@shopify/polaris/dist/styles.css';\r\nimport './App.css';\r\nimport {\r\n  Card,\r\n  ResourceList,\r\n  ResourceItem,\r\n  Stack,\r\n  TextStyle,\r\n  Caption,\r\n  Button,\r\n} from '@shopify/polaris';\r\nimport { ButtonType, Movie, MovieListType } from './types';\r\n\r\ninterface IMovieListProps {\r\n  title: string,\r\n  type: MovieListType,\r\n  placeholder: string,\r\n  errorMessage?: string,\r\n  movies: Movie[],\r\n  isLoading: boolean,\r\n  readOnly: boolean,\r\n  onEdit: (movie: Movie) => void\r\n  canEdit: (movie: Movie) => boolean\r\n}\r\n\r\nexport default class MovieList extends React.Component<IMovieListProps> {\r\n\r\n  static defaultProps = {\r\n    readOnly: false,\r\n    placeholder: \"\",\r\n    onEdit: (movie: Movie) => {},\r\n    canEdit: (movie: Movie) => false\r\n  }\r\n\r\n  renderIMDbButton = (movie: Movie) => {\r\n    return (\r\n      <Button external url={`https://imdb.com/title/${movie.imdbID}`}>\r\n        View on IMDb\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  renderActionButton = (movie: Movie) => {\r\n    const buttonText = this.props.type === MovieListType.nominations ? \"Remove\" : \"Nominate\";\r\n    const buttonType = this.props.type === MovieListType.nominations ? ButtonType.destructive : ButtonType.primary;\r\n    const disabled = this.props.canEdit(movie);\r\n\r\n    return (\r\n      !this.props.readOnly &&\r\n      <Button\r\n        primary={buttonType === ButtonType.primary}\r\n        destructive={buttonType === ButtonType.destructive}\r\n        disabled={disabled}\r\n        onClick={() => this.props.onEdit(movie)}\r\n      >\r\n        {buttonText}\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  renderMovie = (movie: Movie) => {\r\n    const { imdbID, title, year } = movie;\r\n\r\n    return (\r\n      <ResourceItem\r\n        id={imdbID}\r\n        onClick={() => {}}\r\n        accessibilityLabel={`${title} (${year})`}\r\n        name={`${title} (${year})`}\r\n        children={\r\n          <Stack vertical>\r\n            <Stack vertical>\r\n              <TextStyle variation=\"strong\">\r\n                {title}\r\n                <Caption>{year}</Caption>\r\n              </TextStyle>\r\n            </Stack>\r\n            <Stack distribution=\"trailing\">\r\n              {this.renderIMDbButton(movie)}\r\n              {this.renderActionButton(movie)}\r\n            </Stack>\r\n          </Stack>\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card\r\n        sectioned={this.props.movies.length <= 0}\r\n        title={this.props.title}\r\n      >\r\n        <ResourceList\r\n          emptyState={this.props.placeholder}\r\n          loading={this.props.isLoading}\r\n          items={this.props.movies}\r\n          renderItem={(movie) => this.renderMovie(movie)}\r\n        />\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport '@shopify/polaris/dist/styles.css';\r\nimport {\r\n  Card,\r\n  Icon,\r\n  TextField,\r\n} from '@shopify/polaris';\r\nimport {SearchMinor} from '@shopify/polaris-icons';\r\n\r\ninterface ISearchBarProps {\r\n  searchValue?: string,\r\n  onSearchValueChange: (searchValue: string) => void,\r\n}\r\n\r\nexport default class SearchBar extends React.Component<ISearchBarProps> {\r\n\r\n  static defaultProps = {\r\n    searchValue: \"\"\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card sectioned>\r\n        <TextField\r\n          label=\"Movie title\"\r\n          placeholder=\"Search your movie here\"\r\n          onChange={this.props.onSearchValueChange}\r\n          value={this.props.searchValue}\r\n          prefix={\r\n            <Icon source={SearchMinor} color=\"inkLighter\" />\r\n          }\r\n        />\r\n      </Card>\r\n    );\r\n  }\r\n}","import { OMDBResponse } from \"./types\";\r\n\r\nexport const getMovieByID = async (id: string): Promise<OMDBResponse> => {\r\n  const response = await fetch(`https://www.omdbapi.com/?i=${id}&apikey=${process.env.REACT_APP_OMDB_API_KEY}&type=movie`);\r\n  const movie = await response.json();\r\n  return new OMDBResponse(movie);\r\n}\r\n\r\nexport const getMoviesBySearchTerm = async (searchTerm: string): Promise<OMDBResponse> => {\r\n  const response = await fetch(`https://www.omdbapi.com/?s=${searchTerm}&apikey=${process.env.REACT_APP_OMDB_API_KEY}&type=movie`);\r\n  const movies = await response.json();\r\n  return new OMDBResponse(movies);\r\n}","import React, { Suspense } from 'react';\nimport '@shopify/polaris/dist/styles.css';\nimport './App.css';\nimport {\n  Banner,\n  Button,\n  Layout,\n  Page,\n  Spinner,\n  Stack,\n  Tooltip,\n} from '@shopify/polaris';\nimport { Movie, MovieListType, OMDBErrors } from './types';\nimport MovieList from './MovieList';\nimport SearchBar from './SearchBar/SearchBar';\nimport { getMoviesBySearchTerm } from './handlers';\n\ninterface IAppState {\n  isLoading: boolean,\n  searchValue: string,\n  movies: Movie[],\n  nominations: Movie[],\n  errorMessage?: string,\n  shareModalOpen: boolean\n}\n\nclass App extends React.Component<{}, IAppState> {\n\n  readNominationsFromLocalStorage = () => {\n    return localStorage.getItem(\"nominations\") ? JSON.parse(localStorage.getItem(\"nominations\") || \"\") : [];\n  }\n\n  updateLocalStorage = () => {\n    this.state.nominations.length > 0\n      ? localStorage.setItem(\"nominations\", JSON.stringify(this.state.nominations))\n      : localStorage.clear()\n  }\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      searchValue: \"\",\n      movies: [],\n      nominations: this.readNominationsFromLocalStorage(),\n      errorMessage: \"\",\n      shareModalOpen: false\n    }\n  }\n\n  handleAddNomination = (nomination: Movie) => {\n    let nominations = Array.from(this.state.nominations);\n    this.setState({\n      nominations: [...nominations, nomination]\n    }, this.updateLocalStorage);\n  }\n\n  handleRemoveNomination = (nomination: Movie) => {\n    let nominations = Array.from(this.state.nominations);\n    this.setState({\n      nominations: nominations.filter((m: Movie) => { return m.title !== nomination.title })\n    }, this.updateLocalStorage);\n  }\n\n  checkNominated = (nomination: Movie) => {\n    return this.state.nominations.includes(nomination);\n  }\n\n  handleSearchValueChange = async (searchValue: string) => {\n    this.setState({\n      searchValue: searchValue,\n      isLoading: true\n    });\n\n    if (!searchValue) {\n      this.setState({\n        movies: [],\n        isLoading: false\n      });\n      return;\n    }\n\n    const response = await getMoviesBySearchTerm(searchValue);\n\n    this.setState({\n      isLoading: false,\n      errorMessage: response.error,\n      movies: response.movies\n    });\n  }\n\n  clear = () => {\n    this.setState({\n      isLoading: false,\n      searchValue: \"\",\n      movies: [],\n      nominations: [],\n      errorMessage: \"\",\n      shareModalOpen: false\n    }, this.updateLocalStorage);\n  }\n\n  toggleModal = () => {\n    this.setState({\n      shareModalOpen: !this.state.shareModalOpen\n    });\n  }\n  \n  render() {\n    const noNominations = \"You haven't nominated any movies yet.\";\n    const noResults = \"Couldn't find any movies with that name. Try with another one.\";\n    const tooManyResults = \"Too many results found with that name. Try being more specific.\";\n    const emptySearch = \"Use the search bar above to find your favorite movies and nominate them.\";\n\n    const ShareModal = React.lazy(() => import(\"./ShareModal/ShareModal\"));\n\n    const shareButton = (\n      <Button\n        primary\n        disabled={ this.state.nominations.length < 5 }\n        onClick={() => this.setState({ shareModalOpen: true })}\n        children={\"Share\"}\n      />\n    )\n\n    return (\n      <Page\n        title=\"The Shoppies\"\n        primaryAction={\n          <Stack>\n            <Button\n              disabled={this.state.nominations.length <= 0 && !this.state.searchValue}\n              onClick={this.clear}\n            >\n              Clear\n            </Button>\n            {\n              this.state.nominations.length < 5 &&\n              <Tooltip content={<>Before sharing, you must select your <b>five</b> nominations.</>}>\n                {shareButton}\n              </Tooltip>\n            }\n            { this.state.nominations.length === 5 && shareButton }\n            \n          </Stack>\n        }\n      >\n        <Suspense fallback={<Spinner/>}>\n          <ShareModal\n            open={this.state.shareModalOpen}\n            nominations={this.state.nominations}\n            toggleModal={this.toggleModal}\n          />\n        </Suspense>\n        <Layout>\n          {\n            this.state.nominations.length === 5 &&\n            <Layout.Section>\n              <Banner title=\"You did it!\" status=\"success\" onDismiss={() => {}}>\n                <p>You have successfully picked your five nominations for the Shoppies.</p>\n              </Banner>\n            </Layout.Section>\n          }\n          \n          <Layout.Section>\n            <SearchBar\n              searchValue={this.state.searchValue}\n              onSearchValueChange={this.handleSearchValueChange}\n            />\n          </Layout.Section>\n          <Layout.Section oneHalf>\n            <MovieList\n              title={!this.state.searchValue? \"Results\" : `Results for \"${this.state.searchValue}\"`}\n              type={MovieListType.search}\n              placeholder={!this.state.searchValue? emptySearch : this.state.errorMessage === OMDBErrors.noResults ? noResults : tooManyResults}\n              errorMessage={this.state.errorMessage}\n              isLoading={this.state.isLoading}\n              movies={this.state.movies}\n              onEdit={this.handleAddNomination}\n              canEdit={this.state.nominations.length < 5 ? this.checkNominated : () => true}\n            />\n          </Layout.Section>\n          <Layout.Section oneHalf>\n          <MovieList\n            title=\"Nominations\"\n            type={MovieListType.nominations}\n            placeholder={noNominations}\n            isLoading={this.state.isLoading}\n            movies={this.state.nominations}\n            onEdit={this.handleRemoveNomination}\n          />\n          </Layout.Section>\n        </Layout>\n      </Page>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport '@shopify/polaris/dist/styles.css';\r\nimport {\r\n  Button,\r\n  Layout,\r\n  Page,\r\n} from '@shopify/polaris';\r\nimport { Movie, MovieListType } from '../types';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport MovieList from '../MovieList';\r\nimport { getMovieByID } from '../handlers';\r\n\r\ninterface ISharedListProps {\r\n  username: string,\r\n  nominations: string\r\n}\r\n\r\ninterface ISharedListState {\r\n  isLoading: boolean,\r\n  movies: Movie[]\r\n}\r\n\r\nexport default class SharedList extends React.Component<RouteComponentProps<ISharedListProps>, ISharedListState> {\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLoading: true,\r\n      movies: []\r\n    }\r\n\r\n    const movies = this.getMovies();\r\n\r\n    Promise.all(movies).then((response) => {\r\n        this.setState({\r\n          isLoading: false,\r\n          movies: response.filter((movie) => movie && movie.response)\r\n        });\r\n      }\r\n    );   \r\n  }\r\n\r\n  getMovies = () => {\r\n    const ids = this.props.match.params.nominations.split(\",\");\r\n    return ids.map(async (id) => {\r\n      const response = await getMovieByID(id);\r\n      return response.movies[0];\r\n    });\r\n  }\r\n\r\n  render() {\r\n    \r\n\r\n    return (\r\n      <Page\r\n        breadcrumbs={[{content: \"Create your own list\", onAction: () => this.props.history.push(\"/\") }]}\r\n        primaryAction={<Button primary onClick={() => window.print()}>Print</Button>}\r\n      >\r\n        <Layout>\r\n          <Layout.Section>\r\n            <MovieList\r\n              title=\"Nominations\"\r\n              type={MovieListType.nominations}\r\n              readOnly={true}\r\n              isLoading={this.state.isLoading}\r\n              movies={this.state.movies}\r\n            />\r\n          </Layout.Section>\r\n        </Layout>\r\n      </Page>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {AppProvider} from '@shopify/polaris';\r\nimport enTranslations from '@shopify/polaris/locales/en.json';\r\nimport '@shopify/polaris/dist/styles.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport SharedList from './SharedList/SharedList';\r\n\r\nReactDOM.render(\r\n  <Router basename=\"/shopify-frontend-challenge\">\r\n    <AppProvider i18n={enTranslations}>\r\n      <Route exact path=\"/\" component={App} />\r\n      <Route path=\"/list/:nominations\" component={SharedList} />\r\n    </AppProvider>\r\n  </Router>,\r\n  document.querySelector('#root'),\r\n);\r\nreportWebVitals();\r\n"],"sourceRoot":""}